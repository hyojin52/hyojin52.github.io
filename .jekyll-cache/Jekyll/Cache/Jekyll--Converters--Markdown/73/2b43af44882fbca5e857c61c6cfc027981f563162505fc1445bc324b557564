I"I$<ul>
  <li>목표: 웹 페이지 다운로드</li>
  <li>주요도구 및 라이브러리: Node.js, Rhino, Nashorn</li>
</ul>

<hr />
<p>     ※ 해당 포스트는 “자바스크립트와 Node.js를 이용한 웹 크롤링 테크닉” 도서를 기반으로 하고 있습니다. <br />
         문제가 될 경우 삭제하도록 하겠습니다.<br />
     ※ 글 내용 중에 미흡한 부분이 있을 수 있습니다. ^^ 댓글로 남겨주세요!<br /></p>

<hr />

<p><br />
프로젝트 시작을 알리는 첫번째 챕터! Node.js를 활용하여 웹 페이지를 다운로드 해보자. 아래의 코드는 <a href="https://github.com/Jpub/JSWebCrawler">JPub Github</a>에서 다운로드 가능하다.<br /><br /></p>

<h2 id="1-웹-페이지-다운로드nodejs">1. 웹 페이지 다운로드(Node.js)</h2>
<hr />
<h3 id="1-기본코드">1) 기본코드</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// url 에 있는 파일을 savepath 에 다운로드한다</span>
<span class="c1">// 다운로드할 URL을 지정</span>
<span class="c1">// var url = "http://www.naver.com/";</span>
<span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">http://hisnet.handong.edu/</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">// 저장할 위치를 지정</span>
<span class="kd">var</span> <span class="nx">savepath</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">test.html</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">// 사용 모듈 정의 ---- (※ 1)</span>
<span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">http</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// HTTP 모듈</span>
<span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 파일처리 관련 모듈</span>

<span class="c1">// 출력 지정 --- (※ 2)</span>
<span class="kd">var</span> <span class="nx">outfile</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">createWriteStream</span><span class="p">(</span><span class="nx">savepath</span><span class="p">);</span>

<span class="c1">// 비동기로 URL의 파일 다운로드 --- (※ 3)</span>
<span class="nx">http</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">outfile</span><span class="p">);</span> <span class="c1">// --- (※ 4)</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">end</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="c1">// --- (※ 5)</span>
        <span class="nx">outfile</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">ok</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>
<p>위의 코드를 실행하면 test.html 파일이 생성된다. url 변수에 <a href="http://www.naver.com/">Naver 주소</a>를 입력한 경우, test.html 파일에서 302 Found 결과를 얻을 수 있었다. 302는 Redirect로, 요청한 리소스가 임시적으로 새로운 URL로 이동했음(Temporarily Moved)을 나타낸다. 해당 주소는 http이고, 현재 Naver 홈페이지는 https이기 때문에 302 Found와 같은 결과를 얻은 것 같다.<br /></p>

<p>다음으로 url 변수에 <a href="http://hisnet.handong.edu/">한동대학교 주소</a>를 입력한 경우, 아래와 같은 test.html 파일을 생성하였다.</p>

<p><img src="/assets/img/web_crawling/02-01-result.png" alt="result" />
<br /></p>

<h3 id="2-함수화된-코드">2) 함수화된 코드</h3>
<p>위의 기본코드를 함수화하여 리팩토링한 코드이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 다운로드</span>
<span class="nx">download</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">http://jpub.tistory.com/539</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">spring.html</span><span class="dl">"</span><span class="p">,</span>
  <span class="kd">function</span><span class="p">(){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">ok, spring.</span><span class="dl">"</span><span class="p">);</span> <span class="p">});</span>

<span class="nx">download</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">http://jpub.tistory.com/537</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">angular.html</span><span class="dl">"</span><span class="p">,</span>
  <span class="kd">function</span><span class="p">(){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">ok, angular.</span><span class="dl">"</span><span class="p">);</span> <span class="p">});</span>

<span class="c1">// url 의 파일을 savepath 에 다운로드하는 함수</span>
<span class="kd">function</span> <span class="nx">download</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">savepath</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">http</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">outfile</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">createWriteStream</span><span class="p">(</span><span class="nx">savepath</span><span class="p">);</span>

  <span class="kd">var</span> <span class="nx">req</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">outfile</span><span class="p">);</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">end</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="nx">outfile</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
      <span class="nx">callback</span><span class="p">();</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="2웹-페이지-다운로드rhinonarshon">2.웹 페이지 다운로드(Rhino/Narshon)</h1>
<hr />
<p>Rhino와 Narshon의 경우 “자바”를 기반으로하고 있는 자바스크립트 엔진으로 Node.js와 비교했을 때 자바 API를 사용할 수 있다는 강력한 장점이 존재한다. 아래 코드는 위의 Node.js를 활용한 웹 페이지 다운로드와 동일한 동작을 하는 코드이다.<br />
다만, 해당 코드를 실행하기 위해서는 Rhino와 Narshon을 설치하는 과정이 요구된다.<br /></p>

<pre><code class="language-Java">
</code></pre>

<h2 id="3-references">3. References</h2>
<hr />
<p>1) <a href="http://www.yes24.com/Product/Goods/34907983?scode=032&amp;OzSrank=1">도서_자바스크립트와 Node.js를 이용한 웹 크롤링 테크닉</a><br />
2) <a href="https://github.com/Jpub/JSWebCrawler">예제 코드_JPub Github</a>
<br /><br /></p>
:ET