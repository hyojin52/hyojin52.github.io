I"t(<ul>
  <li>문제 유형: 스택-큐_LIFO-FIFO 자료형</li>
  <li>난이도: level_02 (약 4,908명 완료)</li>
  <li>사용 언어: C++ <br /><br /></li>
</ul>

<h2 id="1-문제">1. 문제</h2>
<h3 id="1-주식가격">1) 주식가격</h3>
<p>초 단위로 기록된 주식가격이 담긴 배열 prices가 매개변수로 주어질 때, 가격이 떨어지지 않은 기간은 몇 초인지를 return 하도록 solution 함수를 완성하세요.
<br /></p>

<h3 id="2-제한사항">2) 제한사항</h3>
<ul>
  <li>prices의 각 가격은 1 이상 10,000 이하인 자연수입니다.</li>
  <li>prices의 길이는 2 이상 100,000 이하입니다.</li>
</ul>

<h3 id="3-기본코드">3) 기본코드</h3>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;string&gt;
#include &lt;vector&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">solution</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">prices</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">answer</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p><br /><br /></p>

<h2 id="2-알고리즘-생각해보자">2. 알고리즘! 생각해보자</h2>
<p>1) 문제 제대로 이해하기: 주식 가격이 떨어지는 시점에서 시간 계산</p>

<p><br /><br /></p>

<h2 id="3-해결코드">3. 해결코드</h2>
<p>[C++]<br /></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;stack&gt;
#include &lt;algorithm&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="n">string</span> <span class="n">arrangement</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="n">stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pipe</span><span class="p">;</span>

    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">lazer_idx</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">pipe_idx</span><span class="p">;</span>

    <span class="c1">//1.find lazer index</span>
    <span class="kt">size_t</span> <span class="n">found</span><span class="p">;</span>    
    <span class="n">string</span> <span class="n">lazer</span> <span class="o">=</span> <span class="s">"()"</span><span class="p">;</span>
    <span class="n">found</span> <span class="o">=</span> <span class="n">arrangement</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">lazer</span><span class="p">);</span>

    <span class="k">while</span><span class="p">(</span><span class="n">found</span> <span class="o">!=</span> <span class="n">string</span><span class="o">::</span><span class="n">npos</span><span class="p">){</span>
        <span class="n">lazer_idx</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">found</span><span class="p">);</span>
        <span class="n">found</span> <span class="o">=</span> <span class="n">arrangement</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">lazer</span><span class="p">,</span> <span class="n">found</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">//2.find pipe index</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arrangement</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">arrangement</span><span class="p">.</span><span class="n">compare</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s">"("</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">arrangement</span><span class="p">.</span><span class="n">compare</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s">")"</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
            <span class="n">pipe</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">arrangement</span><span class="p">.</span><span class="n">compare</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s">"("</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">arrangement</span><span class="p">.</span><span class="n">compare</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s">")"</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span><span class="p">{</span>
            <span class="n">pipe_idx</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">pipe</span><span class="p">.</span><span class="n">top</span><span class="p">(),</span> <span class="n">i</span><span class="p">));</span>
            <span class="n">pipe</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>   

    <span class="c1">//2-1.파이프 sorting(왜? 레이저가 index 순서대로 저장되어 있으므로, 편하게 찾기 위해!)</span>
    <span class="n">sort</span><span class="p">(</span><span class="n">pipe_idx</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">pipe_idx</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>

    <span class="c1">//3.count lazer in each pipe, and calculate the # of cut pipes</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">pipe_idx</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">lazer_idx</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">lazer_idx</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">pipe_idx</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span> <span class="o">&amp;&amp;</span> <span class="n">lazer_idx</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">pipe_idx</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">){</span>
                <span class="n">answer</span><span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">answer</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p><br /><br /></p>

<h2 id="4-문제해결능력-up-되짚어보기">4. 문제해결능력 UP! 되짚어보기</h2>
<ul>
  <li>만족하면서 풀었던 문제! 스택-큐 주제에 맞게 적절히 푼 것 같음</li>
  <li>C++ 공식 레퍼런스를 구석구석 참조해가며 문제해결!</li>
</ul>

<p><br /><br /></p>

<h2 id="5-references">5. References</h2>
<p>1) 공식 C++ References (<a href="https://modoocode.com/241">https://modoocode.com/241</a>)
<br /><br /></p>
:ET